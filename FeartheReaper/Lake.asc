// Main script for module 'Lake'
// v1.0 by Steve McCrea, 8th July 2006

// uses this code taken from a java lake applet's source
// h/14*(i+28)*sin(h/14*(h-i)/(i+1) + phase)/h

function Lake::DefaultConstruct()
{
  this.enabled = true;
  this.x = 50;
  this.y = 200;
  this.w = 50;  //320
  this.h = 100;
  this.speed = 2.0;
  
  this.useScreenshot = false;
  this.backgroundFrameIndex = 0;
  
  this.yRipplePhaseScale = 1.0;
  this.yRippleSize = 2.0;  //1
  this.yRippleDensity = 1.0;
  
  this.xRipplePhaseScale = 0.5;
  this.xRippleDensity = 8.0;
  this.xRippleSize = 1.0;

  this.yPhase = 0.0;
  this.xPhase = 0.5*Maths.Pi;
}

function Lake::SetScreenshotBufferBackgroundFrames(int displayFrame, int bufferFrame)
{
  this.useScreenshot = true;
  this.backgroundFrameIndex = bufferFrame;
  
  SetBackgroundFrame(displayFrame);
}

function Lake::Update()
{
  if (this.enabled)
  {
    float phaseScalar = Maths.Pi/IntToFloat(GetGameSpeed());

		this.yPhase += this.speed*this.yRipplePhaseScale*phaseScalar;
		while (this.yPhase > 2.0*Maths.Pi) this.yPhase -= 2.0*Maths.Pi;
		
		this.xPhase += this.speed*this.xRipplePhaseScale*phaseScalar;
		while (this.xPhase > 2.0*Maths.Pi) this.xPhase -= 2.0*Maths.Pi;
	
		float fh = IntToFloat(this.h);
		
		if (this.useScreenshot)
		{
		  // copy to "back buffer"
		  DynamicSprite *bg = DynamicSprite.CreateFromScreenShot();
		  int bgFrame = GetBackgroundFrame();
      DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
		  SetBackgroundFrame(this.backgroundFrameIndex);
		 // surface.DrawImage(0, 0, bg.Graphic);
		  SetBackgroundFrame(bgFrame);
		  bg.Delete();
		}

		int i = 0;
		while (i < this.h)
		{
			float fi = IntToFloat(i);
			float yAngle = ((this.yRippleDensity*fh/14.0)*(fh-fi)/(fi+1.0)) + this.yPhase;
			float yoff = this.yRippleSize*((28.0+fi)/14.0)*(1.0 + Maths.Sin(yAngle));
			int yoffi = FloatToInt(yoff);
			int yi = i - yoffi;
			if (yi >= 0)
			{
			  float xAngle = ((this.xRippleDensity*fh/14.0)*(fh-fi)/(fi+1.0)) + this.xPhase;
				float xoff = this.xRippleSize*((28.0+fi)/14.0)*(1.0 + Maths.Sin(xAngle));
				int xoffi = FloatToInt(xoff);
 				DynamicSprite *s = DynamicSprite.CreateFromBackground(this.backgroundFrameIndex, this.x + xoffi, this.y - yi, this.w - 2*xoffi, 1);
			 DrawingSurface *surface = s.GetDrawingSurface();
       surface.DrawImage(this.x, this.y + i, s.Graphic, 50, this.w, 1);
			}
			i++;
		}
	}
}