// Room1 script file  (Bunny Pox)

/*
CUSTOM OBJECT PROPERTIES: 
alive - virus is active
direction - direction object is moving
infected - person is infected with virus
odds - odds object may change direction
*/

int wind = 0;
int direction = 0;  // 0-up/q  1-right/k  2-down/m  3-left/o  4/upleft 5/upright 6/downleft 7/downright
int num_infected = 0;
int num_people = 3;
float gravity = 0.003;
float max_gravity = 500.0;
bool clicked = false;

// Person object properties
Object* person[];     //Array of every person object in the Room (not dynamic)

// Virus object properties
Object* virus[];       //Array of every virus object in the Room (not dynamic)

int range = 2;          // Number of viruses released per sneeze
int min_virus = 0;      // Minimum index virus not yet used
int total_virus = 0;    // Total number of virus possible
int num_virus = 0;      // Number of active viruses

float p_x[3];       //Array of every persons x location
float p_y[3];       //Array of every persons y location

float v_x[6];       //Array of every viruses x location
float v_y[6];       //Array of every viruses y location

// Before Room Load
function room_Load()
{  
  numberOfTicks = 0.0;

  // initilize virus variables
  total_virus = num_people*range;
  num_virus = 0;
  
  // initilize people variables
  person = new Object[num_people];
  
  person[0] = oBoy0;
  person[1] = oBoy1;
  person[2] = oBoy2;

  virus = new Object[total_virus];
  
  virus[0] = v0;
  virus[1] = v1;
  virus[2] = v2;
  virus[3] = v3;
  virus[4] = v4;
  virus[5] = v5;
    
  //Set random Wind speed and direction
  wind = Random(10) + 1;
  direction = Random(3);
  
  // Get HUD data
  lblSpeed.Text = String.Format("%d", wind);
  
  // Print Wind arrow
  switch (direction) {
  case 0:
    lblDirection.Text = "q";
    break;
  case 1:
    lblDirection.Text = "k";
    break;
  case 2:
    lblDirection.Text = "m";
    break;
  case 3:
    lblDirection.Text = "o";
    break;
  } 

  // Draw Infected gauge
  DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
  surface.DrawingColor = Game.GetColorFromRGB(180, 0, 0);
  surface.DrawRectangle(435, 22, 437, 39);
  surface.Release();
  
    //Turn on HUD
  gtopHUD.Visible = true;
  
  //oBoy.SetView(1);  //Use to make it look like he's walking
  
  //Initialize people
  for (int i = 0; i < num_people; i++)
  { 
    person[i].SetProperty("infected",0);
    person[i].SetProperty("odds",Random(10));
    person[i].SetProperty("direction",Random(7)); //Set people directions
    person[i].SetProperty("speed",Random(1)+1); //Set people speed
    person[i].SetTextProperty("type","p"); //Set to person type
    p_x[i] = IntToFloat(person[i].X);
    p_y[i] = IntToFloat(person[i].Y);
  }
  
  //Initialize viruses
  for (int i = 0; i < total_virus; i++)
  { 
    virus[i].SetProperty("alive",0);             //Set all to dead
    virus[i].SetProperty("odds",Random(50));     //Set odds (don't change)
    virus[i].SetProperty("direction",Random(7)); //Set initial virus directions
    virus[i].SetProperty("speed",Random(4)+1);
    virus[i].SetTextProperty("type","v");   //Set to virus type
    v_x[i] = IntToFloat(virus[i].X);
    v_y[i] = IntToFloat(virus[i].Y);
  }
 
}


//Update number of people infected on top HUD
function update_infected_count() {
  
  num_infected = 0;
  
  for (int i = 0; i < num_people; i++)
  {
    num_infected =  person[i].GetProperty("infected") + num_infected;
  }
   lblNum.Text = String.Format("%d", num_infected);
}


//Bunny pox release by SNEEZE (range = number released)
function sneeze(Object* pers, int x, int y) {
  
  aSneeze.Play(eAudioPriorityVeryHigh);
  Wait(30);
  
  pers.Graphic = 2;
  pers.SetProperty("infected",1);
   
  int max_virus = min_virus + range;
  
  for (int i = min_virus; i < max_virus; i++)
  {  
    // Make viruses active and visible
    virus[i].X = x;  //Set to person's location
    virus[i].Y = y;  //Set to person's location
    virus[i].SetProperty("alive",1);
    virus[i].Visible = true;
    num_virus = num_virus + 1;
    v_x[i] = IntToFloat(virus[i].X);
    v_y[i] = IntToFloat(virus[i].Y);
  }
   
   //Set range for next set of viruses for next sneeze
   min_virus = max_virus;
   
   update_infected_count();

}

// Move people on the screen
 // 0-up/q  1-right/k  2-down/m  3-left/o  4/upleft 5/upright 6/downleft 7/downright
function move_down(Object* obj, int idx, float speed) {
  
  if (obj.Y >= maxy) {
    return 0;
  }
  else { 
  
     if (obj.GetTextProperty("type") == "p") {
      p_y[idx] = p_y[idx] + speed;      
      obj.Y = FloatToInt(p_y[idx]);
     }
     else {
      v_y[idx] = v_y[idx] + speed;      
      obj.Y = FloatToInt(v_y[idx]);
     }
    return 2;
  }
  
}

function move_up(Object* obj, int idx, float speed) {
  
  if (obj.Y <= miny) {
     return 2;
  }
  else { 
     if (obj.GetTextProperty("type") == "p") {
      p_y[idx] = p_y[idx] - speed;      
      obj.Y = FloatToInt(p_y[idx]);
    }
    else {
      v_y[idx] = v_y[idx] - speed;      
      obj.Y = FloatToInt(v_y[idx]);
    }
  return 0;
  }
}

function move_left(Object* obj, int idx, float speed) {
  
   if (obj.X <= minx) {
     return 1;    
   }
   else {
     if (obj.GetTextProperty("type") == "p") {
      p_x[idx] = p_x[idx] - speed;      
      obj.X = FloatToInt(p_x[idx]);
    }
    else {
      v_x[idx] = v_x[idx] - speed;      
      obj.X = FloatToInt(v_x[idx]);
    } 
     return 3;
   }
}

function move_right(Object* obj, int idx, float speed) {
  
  if (obj.X >= maxx) {
    return 3;
  }
  else {
    
    if (obj.GetTextProperty("type") == "p") {
      p_x[idx] = p_x[idx] + speed;      
      obj.X = FloatToInt(p_x[idx]);
    }
    else {
      v_x[idx] = v_x[idx] + speed;      
      obj.X = FloatToInt(v_x[idx]);
    }
    return 1;
  }
}

function move_upleft(Object* obj, int idx, float speed) {
  
  if (obj.X <= minx || obj.Y <= miny) {
    return 7;
  }
  else {    
      if (obj.GetTextProperty("type") == "p") {
      p_x[idx] = p_x[idx] - speed;
      p_y[idx] = p_y[idx] - speed;
      
      obj.X = FloatToInt(p_x[idx]);
      obj.Y = FloatToInt(p_y[idx]);
    }
    else {
      v_x[idx] = v_x[idx] - speed;
      v_y[idx] = v_y[idx] - speed;
      
      obj.X = FloatToInt(v_x[idx]);
      obj.Y = FloatToInt(v_y[idx]);
    }
    return 4;
  }
}

function move_upright(Object* obj, int idx, float speed) {
  
  if (obj.X >= maxx || obj.Y <= miny) {
    return 6;
  }
  else {    
      if (obj.GetTextProperty("type") == "p") {
      p_x[idx] = p_x[idx] + speed;
      p_y[idx] = p_y[idx] - speed;
      
      obj.X = FloatToInt(p_x[idx]);
      obj.Y = FloatToInt(p_y[idx]);
    }
    else {
      v_x[idx] = v_x[idx] + speed;
      v_y[idx] = v_y[idx] - speed;
      
      obj.X = FloatToInt(v_x[idx]);
      obj.Y = FloatToInt(v_y[idx]);
    }
    return 5;
  }
}

function move_downleft(Object* obj, int idx, float speed) {
  
  if (obj.X <= minx || obj.Y >= maxy) {
    return 5;
  }
  else {
    
    if (obj.GetTextProperty("type") == "p") {
      p_x[idx] = p_x[idx] - speed;
      p_y[idx] = p_y[idx] + speed;
      
      obj.X = FloatToInt(p_x[idx]);
      obj.Y = FloatToInt(p_y[idx]);
    }
    else {
      v_x[idx] = v_x[idx] - speed;
      v_y[idx] = v_y[idx] + speed;
      
      obj.X = FloatToInt(v_x[idx]);
      obj.Y = FloatToInt(v_y[idx]);
    }
    return 6;
  }
}

function move_downright(Object* obj, int idx, float speed) {
  
  if (obj.X >= maxx || obj.Y >= maxy) {
    return 4;
  }
  else {
    
    if (obj.GetTextProperty("type") == "p") {
      p_x[idx] = p_x[idx] + speed;
      p_y[idx] = p_y[idx] + speed;
      
      obj.X = FloatToInt(p_x[idx]);
      obj.Y = FloatToInt(p_y[idx]);
    }
    else {
      v_x[idx] = v_x[idx] + speed;
      v_y[idx] = v_y[idx] + speed;
      
      obj.X = FloatToInt(v_x[idx]);
      obj.Y = FloatToInt(v_y[idx]);
    }
    return 7;
  }
}



function choose_direction(Object* obj, int idx, int dir, float speed) {
  
  // 0-up 1-right 2-down 3-left 4-upleft 5-upright 6-downleft 7-downright
  switch (dir) {
  case 0:
    return move_up(obj, idx, speed);
    break;
  case 1:
    return move_right(obj, idx, speed);
    break;
  case 2:
    return move_down(obj, idx, speed);
    break;
  case 3:
    return move_left(obj, idx, speed);
    break;
  case 4:
    return move_upleft(obj, idx, speed);
    break;
  case 5:
    return move_upright(obj, idx, speed);
    break;
  case 6:
    return move_downleft(obj, idx, speed);
    break;
  case 7:
    return move_downright(obj, idx, speed);
    break;
  } 
  
}

// Repeatedly execute in Room
function room_RepExec()
{  
   if (numberOfTicks < max_gravity) {
     //keep ticking
     numberOfTicks++;
   }
   
   // Move people around
   for (int i = 0; i < num_people; i++)
   { //Set direction of people
      person[i].SetProperty("direction",choose_direction(person[i],i,person[i].GetProperty("direction"),numberOfTicks*0.003));
   }
   
   //Check if person randomly changes direction
  for (int i = 0; i < num_people; i++)
  {
    if (change_direction(person[i].GetProperty("odds"))) {    
       person[i].SetProperty("direction",Random(7));
    }
  } 

  // Move Viruses
  for (int i = 0; i < num_virus; i++)
  {  
     //Set direction of virus
     virus[i].SetProperty("direction",choose_direction(virus[i],i,virus[i].GetProperty("direction"), numberOfTicks*0.003));
     
     //virus[i].Y = FloatToInt(Maths.Sin(numberOfTicks * 0.5 * Maths.Pi/5.0)+ IntToFloat(virus[i].Y)) ;
     //virus[i].X += virus[i].GetProperty("speed");

  }
  
  //Check if virus randomly changes direction
  for (int i = 0; i < num_virus; i++)
  {
    if (change_direction(virus[i].GetProperty("odds"))) {    
       //virus[i].SetProperty("direction",Random(7));     // no changing direction damnit
    }
  }
  
  // Check for un-infected person and Bunny pox collision
  for (int i = 0; i < num_virus; i++)
  {
    for (int k = 0; k < num_people; k++)
    {
        // Collision happens
        if (virus[i].IsCollidingWithObject(person[k]) && person[k].GetProperty("infected") == 0)
        {
          sneeze(person[k], person[k].X, person[k].Y); 
        }
    }
  }
 
  // Exit Level once everyone is infected
  //Have some kind of Your Winner! screen
  if (num_infected == num_people) {
      cBlank.ChangeRoom(3); // Next Level
  }
   
}

// Person events to start infection
function oBoy0_AnyClick()
{

 if (!clicked) {
   clicked = true;
   Wait(10);
   sneeze(person[0], person[0].X, person[0].Y);
 }

}

function oBoy1_AnyClick()
{

 if (!clicked) {
   clicked = true;
   Wait(10);
   sneeze(person[1], person[1].X, person[1].Y);
   }

}

function oBoy2_AnyClick()
{

if (!clicked) {
   clicked = true;
   Wait(10);
   sneeze(person[2], person[2].X, person[2].Y);
 }
 
}
// End of person events -------------------

function room_Leave()
{
   
   
}


